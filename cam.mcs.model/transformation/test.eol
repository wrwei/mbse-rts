var rand = new Native("java.util.Random");
var system;
init();
var core = system.core;

run();

operation testSet1() {
	var sem1 = createSemaphore(false, 1, 3);
	var sem2 = createSemaphore(false, 1, 3);
	createTask(1, 2, 3, 4, 5, 6, 7, 8, sem1); 
}

operation run() {
	for(i in Sequence{0..10000}) {
		tick();	
		execute(core.time);
		print_status();
	}
}

operation print_status() {
	var time = core.time;
	var task = "null";
	if(core.current_task.isDefined())
		task = core.current_task.name;
	var queue = core.queue.collect(n|n.name);
	("timestampe: " + time + "\n" + "current task: " + task + "\n" + queue).println();
}

//implement
operation execute(current) {
	for(t in system.tasks) {
		//handles task releases
		if(t.release_time = current) {
			release_task(t);
		}
		handle_current();
	}
	
}

//handles current task
operation handle_current() {
	var t = core.current_task;
	if(t.isDefined()) {
		var curr = core.time;
		//non-critical section
		if(t.current_cs = 0) {
			var enter = t.critical_sections.at(0).start;
			if(t.release_time + enter = curr) {
				//enter critical section
				t.current_cs = 1;
				var cs = t.critical_sections.at(0);
				//acquire_lock
				acquire_lock(t, cs.semaphore);
				//handle ceiling priority
			}
		}
		else {
			var cs = t.critical_sections.at(t.current_cs);
			var elapsed = cs.elapsed;
			//if still in critical section, elapse ++;
			if(elapsed <= cs.execution) {
				cs.elapsed ++;
			}
			//if should exit critical section
			else {
				t.current_cs++;
				//return to original priority
				
			}
		}
		
		//critical section
		if(t.deadline = curr - t.release_time) {
			core.queue.add(t);
			t.release_time = curr + t.period;
			core.current_task = null;
		}
	}
	
}




operation release_task(task) {
	var t = core.current_task; //current running task
	if(t.isUndefined()) {
		core.current_task = task;
		system.ceiling_priority = task.priority;
	}
	else {
		//shall preempt
		if(system.ceiling_priority < task.priority) {
			core.queue.add(t);
			core.curren_task = task;
			system.ceiling_priority = task.priority;
		}
		//shall wait
	}
}

operation init_tasks_and_resources() {
	var sem1 = createSemaphore("R1", false, 1, 3);
	var sem2 = createSemaphore("R2", false, 2, 3);
	var sem3 = createSemaphore("R3", false, 2, 3);
	var t1 = createTask("T1", 1, 2, 10, 4, 5, 6, 7, 8); 
	var cs1 = createCriticalSection("cs1", 2, 3, sem1);
	t1.critical_sections.add(cs1);
	
	var t2 = createTask("T2", 1, 2, 20, 4, 5, 6, 7, 8, sem2); 
	add_resource(t2, sem3);
	var t3 = createTask("T3", 1, 2, 30, 4, 5, 6, 7, 8, sem3);
	add_resource(t3, sem2);
	set_release_time(t1, 10);
	set_release_time(t2, 15);
	set_release_time(t3, 20);
}

operation tick() {
	core.time += 1;
}


operation init() {
	system = new MCSystem;
	system.criticality = Criticality#low;
	system.ceiling_priority = 1;
	system.status = Status#LOW;
	
	
	var core = new Core;
	core.time = 0;
	system.core = core;
	init_tasks_and_resources();
}


operation acquire_lock(task, semaphore) {
	if(sempahore.locked)
		return false;
	else {
		semaphore.locked = true;
		semaphore.acquisition = task;
	}
}

operation release_lock(task, semaphore) {
	if(semaphore.acquisition = task) {
		semaphore.locked = false;
		return true;
	}
	return false;
}

operation createCriticalSection(name, start, execution, sem) {
	var cs = new CriticalSection;
	cs.name = name;
	cs.start = start;
	cs.execution = execution;
	cs.elapsed = 0;
	cs.semaphore = sem;
	return cs;
}

operation createTask(name, pri, T, d, wl, wh, l, dp, of) {
	var task = new Task;
	task.name = name;
	task.priority = pri; //priority
	task.period = T; //period
	task.deadline = d; //deadline
	task.wcet_low = wl; //wcet in low mode
	task.wcet_high = wh; //wcet in high mode
	task.dynamic_priority = dp; //dynamic priority
	task.offset = of; //initial  offset
	task.current_cs = -1;
	system.tasks.add(task); //add this task to the system
	return task;
}

operation add_resource(task, sem) {
	task.semaphore.add(sem);
}

operation set_release_time(task, time) {
	task.release_time = time;
} 

operation createSemaphore(name, locked, initial, ceiling) {
	var sem = new Semaphore;
	sem.name = name;
	sem.locked = locked;
	sem.initial_priority = initial;
	sem.ceiling_priority = ceiling;
	system.resources.add(sem);
	return sem;
}